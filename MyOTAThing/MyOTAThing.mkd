Exercise 10: OTA update via GitHub
===

The objective of this assignment is to design an Over-the-Air (OTA) update system that checks and
downloads new firmware for the ESP32 from the cloud server.

# Design
## System Specification
|                                                                                             Criteria                                                                                             | Importance |
|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:----------:|
| **Robustness:** The ESP32 device should be bootable even if the system update has failed.                                                                                                        |  Essential |
| **Completeness:** The firmware should be updated to the latest version when the update has successfully completed.                                                                               |  Essential |
| **Security:** Download the firmware file over HTTPS. The firmware update process requires a confirmation step. The firmware should only be updated when the user has pressed the pull-up button. |  Essential |
| **Network:** The ESP32 should be able to scan and connect to any WiFi networks (hidden networks included), provided that the password entered is correct.                                        |  Essential |

## Flowchart and Program Workflow
Below is the flowchart and the explanation of the program. The design below is the final design of
the program. Any design changes made during the implementation process are mentioned in
[here](#design-changes-during-implementation).

<p align="center">
  <img src="./images/flowchart.png">
  <p align="center">Flowchart of OTA Update</p>
</p>

### 1. Setting Up
1. Start the WiFi access point
2. Start the web server
3. Connect to the WiFi network
    1. If a WiFi network was connected before (credentials stored on board), connect to it
    2. Else wait for the user to connect to a WiFi network
4. Handle the web server client requests

### 2. Web Page Interaction
1. User connects to Access Point
2. User is able to view details regarding the device
3. User is able to click **UPDATE** if there is a *higher version available*
4. User does not see **UPDATE** button if there is not update available

### 3. Physical Verification
1. User is required to **press pull up button** to confirm the OTA update
2. User will be able to **cancel the update prompt** by entering another page
3. Once the button is pressed and the update process has started, the user will be unable to access
   the web pages until the update is completed or failed

### 4. OTA update
1. System performs a HTTPS GET request to the GitHub server to check for new version.
2. System downloads bin file directly from GitHub and perform the update. The pseudocode for the
   update process is written below:

```c++
doOTAUpdate() {
  respCode = HTTPS GET the URL of the version file

  if respCode == 200
    store the latest version number as highestAvailableVersion
  else
    print error messages
    run setup() again

  if currentVersionNumber >= highestAvailableVersion
    return

  respCode = HTTPS get the firmware bin file
  fileSize = get the file size using http.getSize()

  if respCode == 200 and the fileSize is above 100KB and under 1MB
    if Update.canBegin(fileSize)
      turn on the LED

      starting flashing the firmware using Update.writeStream()

      if Update.end()
        blink the LED

          if Update.isFinished()
            set the currentVersion to highestAvailableVersion
          else
            print error messages
      else
        print error messages
  else
    print error message
}
```

In the situation where the system page is inaccessible, the system should be able to provide
feedback to the user. We opt to use the internal LED on ESP32, as this reduces the reliability on
external components. The feedback should be direct and excessive, allowing the user to understand
the current situation easily. Below is a list that takes utmost priority for the LED feedback:

- Initialisation of the device
- Prompt for a press of the physical button
- Prompt while an update is ongoing
- Prompt once the update is completed/failed

<p align="center">
  <img src="./images/diagram.png" width="500">
  <p align="center">Diagram of System</p>
</p>

# Design Changes During Implementation
1. Initially, the ability to join hidden WiFi networks was not included in the design stage. It was
   later realized that ESP32 should be not be preconfigured to join the `uos-other` network in the
   code, and it should be able to join other hidden networks as well to improve network flexibility.
2. The idea of downloading the firmware directly from GitHub over HTTPS was considered at first. It
   was added because security is one of the essential criteria of the system, and GitHub server
   requires a personal access token to be provided in order to download the bin files from the
   private repository.

# Implementation and Versions

## Implementation
**Stage 1:** The implementation initially started in the method *doOTAUpdate()* to ensure the system
is able to check for new version, download the bin file and flash the new version without any
errors. Certain precaution methods such as checking the file size of the bin file and whether the
ESP32 has enough space to update to the new version are taken to avoid causing the device to
malfunction accidentally.

**Stage 2:** Once the core feature is completed, it is then focused on the physical side of the
system. To improve the security of the firmware update process, a confirmation via pull-up button
was implemented as well as setting up the LED feedbacks to alert the users about the update. As
mentioned previously, the LED signals are made to be simple and direct to allow ease of use for the
users. The LED will continuously flash to prompt the user when they are required to press the pull
up button, and blink once when the update is completed.

In **Stage 1** and **Stage 2**, all implementations were done in `MyOTAThing.ino`, which slowly
became cluttered and hard to maintain over time. Therefore, code are refactored and grouped into
different files according to their functionality.

- `Misc.h` and `Misc.ino` are responsible for controlling the LED, the pull-up button, and getting
  the MAC address.
- `WebServer.h` and `WebServer.ino` are responsible for handling the web server, serving the web
  pages, and connecting to WiFi.
- `MyOTAThing.h` and `MyOTAThing.ino` are the main files that control the OTA update process. It
  combines the functions defined in `Misc.ino` and `WebServer.ino` into `doOTAUpdate()`, which makes
  the code more readable and easier to debug.

**Stage 3:** A web server is implmented for displaying the status of the ESP32, and allowing the
user to connect the ESP32 with WiFi networks. The status page contains the current and latest
version number of the ESP32. A **GREEN UPDATE** button which redirect to `/ota` will be shown to
indicate that the latest version is available to download. If the ESP32 already has the latest
version, visiting the `/ota` page will not allow the system to be updated again.

**Stage 4:** The final part is to download the firmware file directly from GitHub over HTTPS and
providing the ability to connect the hidden WiFi networks. At first, the original cloud server
provided (com3505.gate.ac.uk) was used. However, we eventually convert to download from GitHub over
HTTPS to provide a more secure connection. The implementation was difficult and complicated as the
`getStream()` method in `HTTPClient` does not support HTTPS, and this is not explicitly stated in
the source code comments of the ESP32. After a large amount of trials and errors, it was discovered
that the correct method to use was `getStreamPtr()`, and certain adjustments were needed as the
return type of `getStream()` and `getStreamPtr()` is different. Lastly, the implementation for
joining hidden networks is relatively easy. It is only required to provide another radio option for
the user to input the SSID of the hidden network.

**Stage 5:** As we discovered that the automated checking system does not support web server, we reverted our factory version to `Stage 2` to allow easier the automated checking system to function as intended. The system will update to the newest version containing web server support. In this stage, we also implemented a login system on the web server to increase the security of the system. The user will be required to enter a default account information before they are allowed access to the device information and OTA update functions. Below is the default account's details:

<center>
<p style="font-size:12pt;"><b>Username: esp32</b></p>
<p style="font-size:12pt"><b>Password: admin</b></p> 
</center>

## Versions
**Version 1:** This is the default version number used for the firmware uploaded from Arduino IDE,
it is not included inside the `BinFiles` folder.

|               | Version 2                                                                                                                                                                                                          | Version 3                                                                                                                                                                                                                                                                                                                                                                                                   | Version 4                                                                                                                                                                                                                                                                                                                                                                                                                                          | Version 5                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |
|---------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Features      | <ul><li>HTTP OTA update over com3505.gate.ac.uk</li><li>Requires confirmation of firmware update through <code>PULLUP</code> button</li></ul>                                                                      | <ul><li>HTTP OTA update over com3505.gate.ac.uk</li><li>Reduced workload by performing firmware update only when requested by the user</li><li>Requires confirmation of firmware update through <code>PULLUP</code> button</li><li>Starts a WiFi access point and WebServer, which allows the user to configure which WiFi network to join</li><li>Clean and straightforward web interface design</li></ul> | <ul><li>HTTPS OTA update over www.github.com</li><li>Reduced workload by performing firmware update only when requested by the user</li><li>Requires confirmation of firmware update through <code>PULLUP</code> button</li><li>Starts a WiFi access point and WebServer, which allows the user to configure which WiFi network to join</li><li>Able to join hidden WiFi networks</li><li>Clean and straightforward web interface design</li></ul> | <ul><li>HTTPS OTA update over www.github.com</li><li>Reduced workload by performing firmware update only when requested by the user</li><li>Requires confirmation of firmware update through <code>PULLUP</code> button</li><li>Starts a WiFi access point and WebServer, which allows the user to configure which WiFi network to join</li><li>Able to join hidden WiFi networks</li><li>Clean and straightforward web interface design</li><li>Login is required to enter web server</li></ul> |
| Disadvantages | <ul><li>HTTP, less secure</li><li>Directly performs firmware update (requires confirmation) once it is connected to the internet and found a newer version </li><li>Unable to configure the WiFi network</li></ul> | <ul><li>HTTP, less secure</li><li>Unable to join hidden WiFi networks</li><li>No authentication for web server</li></ul>                                                                                                                                                                                                                                                                                    | <ul><li>Requires manual WiFi configuration at the very first startup</li><li>No authentication for web server</li></ul>                                                                                                                                                                                                                                                                                                                            | <li>Requires manual WiFi configuration at the very first startup</li>                                                                                                                                                                                                                                                                                                                                                                                                                            |
# Debugging
We have implemented a debugging infrastructure that makes use of macros for easier code debugging.
The variables can be changed from `true` to `false` to enable or disable the function respectively.

`setupDBG`: For printing prompts related to the initial setup process.

`netDBG`: For printing prompts related to `WebServer` management.

`loopDBG`: For printing prompt in the `loop` method.

`otaDBG`: For printing prompts in the `doOTAUpdate` method.

# Testing
As the system is fairly small and only equipped with limited functionalities, the system was tested
manually to ensure that each feature functioned correctly. This included running the entire process
from start to finish, followed by trying to reproduce the errors to ensure the error will be catched
by the system.

## OTA Update Test Cases

|                    Test Case                    |                         Expected Output                        | Results |
|:-----------------------------------------------:|:--------------------------------------------------------------:|:-------:|
| System unable to get version                    | Monitor prints "Couldn't get version! rtn code:"               |   Pass  |
| System is up to date                            | Monitor prints "Firmware is up to date"                        |   Pass  |
| System is able to download the firmware file    | Monitor prints "Received bin file of size %d bytes."           |   Pass  |
| System failed to download the firmware file     | Monitor prints "An error occured when retrieving the bin file" |   Pass  |
| System is able to write firmware file           | Monitor prints "Update completed successfully. OTA finished."  |   Pass  |
| System is unable to write the file successfully | Monitor prints "Written only: %d / %d . Retry?"                |   Pass  |
| System encounters error during OTA              | Monitor prints "Error occurred. Error #: %d"                   |   Pass  |
| Device has not enough memory to perform update  | Monitor prints "Not enough memory space to perform the update" |   Pass  |

## Webserver Test Cases

|                           Test Case                          |                            Expected Output                            | Results |
|:------------------------------------------------------------:|:---------------------------------------------------------------------:|:-------:|
| Webserver cannot find link                                   | Monitor prints "URI Not found"                                        |   Pass  |
| Entering /ota while not connected to internet                | /ota prints "No Internet Connection"                                  |   Pass  |
| Entering /home while not connected to internet               | Update button does not appear                                         |   Pass  |
| Entering /wifi with no network found                         | /wifi prints "No WiFi access points found"                            |   Pass  |
| Entering the wrong password when connecting to a new network | Access Point resumes function with /home showing no network connected |   Pass  |
