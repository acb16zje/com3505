Exercise 10: OTA update via GitHub
===

In this assignment, we are tasked to design a system using ESP32 that is able to perform over-the-air update (OTA) and flash itself to a new version. The system should be secure, preventing any exploits to interupt the OTA update progress or gain control of the device itself. The system should also be easy to use, allowing the user to update the device without much hassle.

# Design

Our design will include a 2-step confirmation process that requires the user to do to allow the update. Below is a pseudocode of the system:

### 1. Setting Up
- Connect to Internet
- Initialize Access Point
- Host System Page
### 2. System Page Interaction
- User connects to Access Point
- User is able to view details regarding the device
- User is able to click **UPDATE** if there is a *higher version available*
- User does not see **UPDATE** button if there is not update available
### 3. Physical Verification
- User is required to **press pull up button** to initiate OTA update
- User will be able to **cancel the update prompt** by entering another page
- Once the button is pressed, the user will be unable to access the system page until the update is completed or failed
### 4. OTA update
- System connects to GitHub server to check for new version
- System downloads bin file and flashes

In the situation where the system page is unaccessible, the system should be able to provide feedback to the user. We opt to use the internal LED on ESP32, as this reduces the reliability on external components. The feedback should be direct and inexcessive, allowing the user to understand the current situation easily. Below are a list that take upmost priority for the LED feedback:

- Initialisation of the device
- Prompt for press of physical button
- Prompt while update is ongoing
- Prompt once update is completed/failed

<figure style="text-align:center;">
<img src="./diagram.png" width="500" title="Diagram of System">
<figcaption style="text-align:center;">Diagram of System</figcaption>
</figure>

# Implementation & Testing

## Implementation

The implementation is done in multiple stages. 

**Stage 1:** We initially started with the function *doOTAUpdate()* itself, ensuring the system is able to successfully download the bin file and flash the new version without any errors. We ensured that the files downloaded are validated before attempting to flash in order to avoid bricking.

**Stage 2:** Once the core feature is completed, we focused on the physical side of the system, implementing the pull up button and as well as setting up the LED feedbacks. As previously mentioned, the LED signals are made to be simple and direct to allow ease of use for the users. The LED will continuously flash to prompt the user when they are required to press the pull up button, and blink once something has been completed.

**Stage 3:** We implemented the system page, which we encountered relative difficulty to allow the ESP32 to host an access point while remained connected to the internet. In the end, we succeeded producing the system page, which contains a home page with details regarding the device, as well as a WiFi page that allows the ESP to connect to other networks. The user will be able to initialise the OTA update on the home page if there is a new version available.

**Stage 4:** The final part is to provide a secure connection between the device and the server host. At first, we used the original cloud server provided in the exercise. However, we eventually convert to download from GitHub over HTTPS to provide a more secure connection. The implementation proved difficult as *httpClient* has been depreciated, along with the lack of documentation of Arduino libraries. A large amount of trial and error to figure out how to properly download from GitHub server and unpack the file. 

## Testing

We have implemented debugging infrastructure to allow easier testing for the code. The variables can be changed easily to reduce clutter on the monitor prompt and allow the problems to be assessed faster.

*setupDBG:* prints prompts related to initial setup

*netDBG:* prints prompts related to system page management

*monitDBG:* prints prompts related to OTA update

*loopDBG:* prints prompt to show that the loop continues to run

As the system is fairly small, we tested the system manually, ensuring that each feature functioned correctly. This included running the entire process from start to finish, followed by trying to reproduce the errors to ensure the error will be catched by the system.

