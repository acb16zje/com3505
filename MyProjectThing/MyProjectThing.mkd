Robocar Documentation
===

# Objectives
1. Able to control the Robocar on **any devices** using **WiFi** and **web server**
2. Able to perform **OTA update** and **firmware reset** on the Robocar
3. **Authentication** required to enter web server
4. **Automatic** Robocar with collision detection
5. **IFTTT notifications** when Robocar is stucked in autonomous mode
6. Push the total distance moved in manual mode to **Adafruit.io**

# Prerequisite
## Libraries and Plugins
The following libraries and plugins have to be installed in order to compile and run successfully.

1. [ESP32 Filesystem Uploader](https://github.com/me-no-dev/arduino-esp32fs-plugin) installed, and
   the `data` directory has been uploaded to the ESP32
2. Latest version of [Adafruit_IO_Arduino](https://github.com/adafruit/Adafruit_IO_Arduino) library.
   The one in University Linux machines does not have the `get()` method in `AdafruitIO_Feed`
3. Latest version of [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer). The one in
   University Linux machines is outdated. New version introduced several bug fixes and performance
   improvements.

## Hardware
In addition to the *default* Robocar, this project used two **ultrasonic sensors** to improve the reliability
and performance of the autonomous mode. The hardware setup is shown in [here](#hardware-setup).

# Design
## System Specification
| Criteria | Importance |
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------:|
| **Software Robustness:** The unPhone should be bootable even if the system update has failed. | Essential |
| **Completeness:** The Robocar should be able to move in both automatic and manual mode. The firmware should be updated to the latest version when the update has successfully completed. The firmware should downgrade to version 1 when firmware reset has successfully completed. | Essential |
| **Security:** Authentication is required to enter the web server. OTA update and firmware reset are performed over HTTPS. | Essential |
| **Network:** The unPhone should be able to scan and connect to any WiFi networks (hidden networks included), provided that the password entered is correct. | Essential |
| **Informative:** The unPhone should be able to publish data to Adafruit.io, and send notifications through IFTTT. | Essential |
| **Hardware Robustness:** The motor, ultrasonic sensors, and unPhone should be fully functioning | Desirable |
| **Automatic:** The Robocar should be able to move randomly in automatic mode, while detecting possible obstacles in its front and back to prevent collision. | Desirable |

## Iterations
|  | Iteration 1 | Iteration 2 | Iteration 3 |
|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||
| Features | <ul><li>Basic <code>aREST</code> API controls over WiFi connection</li></ul> | <ul><li>HTML, CSS, and JavaScript files saved in SD card</li><li>Web server loads HTML, CSS, and JS from SD card</li><li>Use jQuery Ajax to send the control command</li></ul> | <ul><li>HTML, CSS, and JavaScript files are saved in SPIFFS (SPI Flash File System)</li><li>Use [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer) to handle all HTTP requests and Ajax calls</li><li>Cache control of static CSS and JS files</li><li>Use HTTP MD5 Digest Authentication for authentication check</li><li>Automatic Robocar mode with front and back collision detection</li><li>Able to recall the Robocar back to the origin point (automatic mode only)</li><li>Send IFTTT notification to the phone when Robocar is stuck</li><li>Push the total distance moved by Robocar in manual mode to Adafruit.io</li><li>OTA update over Github.com using HTTPS protocol</li></ul> |
| Advantages | <ul><li>Simple</li><li>Less power consumption</li></ul> | <ul><li>Able to control the Robocar in both PC and mobile devices</li><li>No longer requires local HTML files to control the Robocar</li></ul> | <ul><li>Feature-rich</li><li>Fast loading time of the AsyncWebServer <strong>(Figure 2)</strong></li><li>Able to control the Robocar in both PC and mobile devices</li><li>No longer requires local HTML files to control the Robocar</li><li>Secure HTTP authorization required before performing any operations</li></ul> |
| Disadvantages | <ul><li>No web server, only able to control the Robocar using local HTML files</li><li>No authentication and OTA update functions, less secure</li><li>Lack of functionality</li></ul> | <ul><li>High power consumption</li><li>Long loading time of the files in SD card <strong>(Figure 1)</strong></li><li>No authentication and OTA update functions, less secure</li><li>Lack of functionality</li></ul> | <ul><li>Very high power consumption</li><li>Complex implementation and increased debugging difficulty</li></ul> |

**Figure 1** and **Figure 2** below shows the loading time of SD web server and AsyncWebServer
respectively. Iteration 2 was not suitable for this project because of its slow performance.

<p align="center">
  <img src="./images/SDserver.png">
  <p align="center"><strong>Figure 1.</strong> Loading time of SD web server (Iteration 2)</p>
</p>

<p align="center">
  <img src="./images/AsyncWebServer.png">
  <p align="center"><strong>Figure 2.</strong> Loading time of AsyncWebServer (Iteration 3)</p>
</p>

# Implementation
talk about how we calculate the distance, and how we got the formula

## Automatic Mode
<p align="center">
  <img src="./images/automatic.png">
  <p align="center"><strong>Figure 3.</strong> Flowchart of OTA update process</p>
</p>

## Recall
<p align="center">
  <img src="./images/recall.gif">
  <p align="center"><strong>Image 1.</strong> Recall process, full video
  <a href="./images/recall.mp4">here</a></p>
</p>

## OTA update
The OTA update function in this project is a modified version of the previous project. The `PULLUP`
button confirmation has been changed to a button click confirmation on the web page itself.

<p align="center">
  <img src="./images/ota_flowchart.png">
  <p align="center"><strong>Figure 4.</strong> Flowchart of OTA update process</p>
</p>

## Hardware Setup

## Challenges
### 1. Calibration:
It is required to experiment with different time values at different speed to find the correct value
for turning the robot 90 degrees. After that, the equation that represents the time change with
respect to speed can be obtained through Excel graph, `time = 2020 - 28.8 * speed + 0.128 * speed *
speed`, as shown in **Figure 5**.

<p align="center">
  <img src="./images/turnRightGraph.png">
  <p align="center"><strong>Figure 5.</strong> Manual calibration of the time required (ms) to turn the
  robot 90 degrees</p>
</p>

### 2. Soldering
Some soldering is required to position the ultrasonic sensors on the `PROTO AREA` of the expander
board.

# Debugging
We have implemented a debugging infrastructure that makes use of macros for easier code debugging.
The variables can be changed from `true` to `false` to enable or disable the function respectively.

`setupDBG`: For printing messages related to the initial setup process.

`netDBG`: For printing messages related to `AsyncWebServer` management.

`otaDBG`: For printing messages in the `doOTAUpdate` method.

`dataDBG`: For printing messages related to Adafruit.io data logging.

`moveDBG`: For printing messages related to the `Movement` control of the Robocar.

# Testing
The system was tested manually to ensure that each feature functioned correctly. This included
running the entire process from start to finish, followed by trying to reproduce the errors to
ensure the error will be handled by the system.

## Robocar Movement Test Cases
|                                Test Case                                |                                      Expected Result                                     | Results |
|:-----------------------------------------------------------------------:|:----------------------------------------------------------------------------------------:|:-------:|
|    Clicking the up arrow button or pressing up arrow key on keyboard    |                                   Robocar moves forward                                  |   Pass  |
|  Clicking the down arrow button or pressing down arrow key on keyboard  |                                  Robocar moves backward                                  |   Pass  |
|  Clicking the left arrow button or pressing left arrow key on keyboard  |                                    Robocar turns left                                    |   Pass  |
| Clicking the right arrow button or pressing right arrow key on keyboard |                                    Robocar turns right                                   |   Pass  |
|                 Releasing mouse click or keyboard press                 |                                       Robocar stops                                      |   Pass  |
|                 Change the speed slider and move forward                |                                   Motor speed increased                                  |   Pass  |
|               Change the current mode from manual to auto               | Robocar starts moving randomly, and turns right when a wall is detected in front or back |   Pass  |
|   While the robocar is moving in auto mode, change the mode to manual   |                                    Robot stops moving                                    |   Pass  |
|    While the robocar is moving in auto mode, navigate to another page   |                                    Robot stops moving                                    |   Pass  |
| While the robocar is moving in the auto mode, press the "Recall" button |          Robocar moves back to the origin point where the auto mode was started          |   Pass  |

## OTA Update Test Cases
|                            Test Case                           |                         Expected Output                         | Results |
|:--------------------------------------------------------------:|:---------------------------------------------------------------:|:-------:|
|                  System unable to get version                  |         Monitor prints "Couldn't get version! rtn code:"        |   Pass  |
|                      System is up to date                      |             Monitor prints "Firmware is up to date"             |   Pass  |
|          System is able to download the firmware file          |       Monitor prints "Received bin file of size %d bytes."      |   Pass  |
|           System failed to download the firmware file          | Monitor prints "An error occurred when retrieving the bin file" |   Pass  |
|         System is able to fully write the firmware file        |  Monitor prints "OTA finished. Update completed successfully."  |   Pass  |
| System is unable to fully write the firmware file successfully |         Monitor prints "Written only: %d / %d . Retry?"         |   Pass  |
|            System encounters error during OTA update           |           Monitor prints "Error occurred. Error #: %d"          |   Pass  |
|      Device does not have enough memory to perform update      |  Monitor prints "Not enough memory space to perform the update" |   Pass  |

## AsyncWebServer Test Cases
|                                  Test Case                                  |                                             Expected Output                                            | Results |
|:---------------------------------------------------------------------------:|:------------------------------------------------------------------------------------------------------:|:-------:|
|                         Web server cannot find link                         |                                      Web page shows 404 Not Found                                      |   Pass  |
|         Entering the wrong password when connecting to a new network        |                   Access Point resumes function with `/` showing no network connected                  |   Pass  |
|                      Wrong Username / Password on Login                     |                     Unable to proceed. Asks for username and password input again.                     |   Pass  |
|                    Visiting any pages without logging in                    |                                   User is redirected back to `/login`                                  |   Pass  |
|                     Entering `/` with updates available                     |                        Update button is shown next to the latest version number                        |   Pass  |
|                 Entering `/` while not connected to internet                |                         Update button does not appear and shows "No Connection"                        |   Pass  |
|               Entering `/control` while connected to internet               |                        `/control` shows Directional Pad, Mode, and Speed options                       |   Pass  |
|             Entering `/control` while not connected to internet             |                        `/control` shows Directional Pad, Mode, and Speed options                       |   Pass  |
|                    Entering `/wifi` with no network found                   |                              `/wifi` prints "No WiFi access points found"                              |   Pass  |
|                    Entering `/ota` with updates available                   |  `/ota` prompts user to press a confirmation button to start update or return to cancel update request |   Pass  |
|               Entering `/ota` while not connected to internet               |                                  `/ota` shows"No Internet Connection"                                  |   Pass  |
| Entering `/ota` while connected to internet and system is at newest version |                                  `/ota` shows "No updates available"                                   |   Pass  |
|              Entering `/reset` while not connected to internet              |                                `/reset` prints "No Internet Connection"                                |   Pass  |
|                  Entering `/reset` in a non factory version                 | `/reset` prompts user to press pull-up button to start factory reset or return to cancel reset request |   Pass  |

# Hardware Problems
Below are a list of hardware problems identified during the implementation and testing stage of the
project.

1. **Problem 1**: LED light on the motor driver dims, and a very small beep sound is
   emitted, motor will not move.
   - **Cause**: The power switch of the AA battery case is not sensitive.
   - **Fix**: Press the power switch down, or slightly adjust it to the left or right
   - **Further note**: It is unable to confirm that flashing `BigDemo.ino` will fix this issue.

2. **Problem 2**: LED light does not dim, no beep sound emitted, motor will not move.
   - **Cause**: This problem occurred during the attempt to fix **Problem 1**, after
     flashing BigDemo.ino and the code. It is unable to determine whether it was a
     hardware or a software issue.
   - **Possible Fix**: Flashing `BigDemo.ino` and `MyProjectThing.ino` again.

3. **Problem 3**: Left motor rotates slower than right motor
   - **Possible cause**: The electricity transmitted to the left motor is lower, the problem is
                         most obvious when the motor speed is low.
   - **Mitigation**: Increase the speed of the left motor by a small "offset" amount.

# Conclusions
Functionalities that have been implemented in into the Robocar system:

1. Remotely control the Robocar using PC or mobile phones on web server (**Flexibility**)
2. Robocar will move randomly while preventing collision with walls using front and back ultrasonic
   sensors (**Automatic**)
3. Robocar will move
4. Send IFTTT notification when the Robocar is stucked during automatic mode (**Informative**)
5. Push the total distance moved of the Robocar in manual mode to Adafruit.io (**Informative**)
6. Authentication required to access the web server pages (**Security**)
7. Check the latest version and download the bin file directly from GitHub over HTTPS (**Security**)
8. Web server that display the status of the device and enable the ability to update or reset the
   firmware remotely (**Flexibility**)
9. The ability to reset the firmware back to version 1 and upgrade to latest version again for
   testing purposes (**Repeatable**)
10. Able to join both visible and hidden WiFi networks using the web server (**Networking**)
