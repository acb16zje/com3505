Robocar Documentation
===

# Table of Contents
- [Objectives](#objectives)
- [Prerequisites](#prerequisites)
  - [Libraries and Plugins](#libraries-and-plugins)
  - [Hardware](#hardware)
- [Design](#design)
  - [System Specification](#system-specification)
  - [Iterations](#iterations)
  - [Flowcharts of Core Functionalities](#flowcharts-of-core-functionalities)
    - [Automatic Mode](#automatic-mode)
      - [1. Initialisation](#1-initialisation)
      - [2. Collision Detection](#2-collision-detection)
      - [3. Notification](#3-notification)
    - [Recall](#recall)
    - [OTA update](#ota-update)
      - [1. Setting Up](#1-setting-up)
      - [2. Web Page Interaction](#2-web-page-interaction)
      - [3. Update Confirmation](#3-update-confirmation)
      - [4. OTA update](#4-ota-update)
- [Implementation](#implementation)
  - [Web Server Authentication](#web-server-authentication)
  - [Robocar Movement (Automatic and Manual Mode)](#robocar-movement-automatic-and-manual-mode)
  - [Recall](#recall-1)
  - [OTA Update](#ota-update)
  - [Google Geolocation API](#google-geolocation-api)
  - [Adafruit.io Data Logging](#adafruitio-data-logging)
  - [IFTTT Notification](#ifttt-notification)
  - [Hardware Setup](#hardware-setup)
  - [Challenges](#challenges)
    - [1. Calibration](#1-calibration)
    - [2. Ultrasonic Sensors](#2-ultrasonic-sensors)
- [Debugging](#debugging)
- [Testing](#testing)
  - [Robocar Movement Test Cases](#robocar-movement-test-cases)
  - [OTA Update Test Cases](#ota-update-test-cases)
  - [AsyncWebServer Test Cases](#asyncwebserver-test-cases)
  - [Adafruit.io Data Logging and IFTTT Notification Test Cases](#adafruitio-data-logging-and-ifttt-notification-test-cases)
- [Hardware Problems](#hardware-problems)
- [Possible Usage and Expansion of the Robocar Project](#possible-usage-and-expansion-of-the-robocar-project)
- [Conclusions](#conclusions)

# Objectives
1. Able to control the Robocar on **any devices** using **WiFi** and **web server**
2. Able to perform **OTA update** and **firmware reset** on the Robocar
3. **Authentication** required to enter web server
4. **Automatic** Robocar with collision detection
5. Able to locate the latitude and longitude of the Robocar using Google Geolocation API
6. **IFTTT notifications** when Robocar is stucked in autonomous mode
7. Push the total distance moved in manual mode to **Adafruit.io**

# Prerequisites
## Libraries and Plugins
The following libraries and plugins have to be installed in order to compile and run successfully.

1. [ESP32 Filesystem Uploader](https://github.com/me-no-dev/arduino-esp32fs-plugin) installed, and
   the `data` directory has been uploaded to the ESP32
2. Latest version of [Adafruit_IO_Arduino](https://github.com/adafruit/Adafruit_IO_Arduino) library.
   The one in University Linux machines does not have the `get()` method in `AdafruitIO_Feed`
3. Latest version of [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer). The one in
   University Linux machines is outdated. New version introduced several bug fixes and performance
   improvements.

## Hardware
In addition to the *default* Robocar, this project used two **ultrasonic sensors** to improve the reliability
and performance of the autonomous mode. The hardware setup is shown in [here](#hardware-setup).

# Design
## System Specification
| Criteria | Importance |
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------:|
| **Software Robustness:** The unPhone should be bootable even if the system update has failed. | Essential |
| **Completeness:** The Robocar should be able to move in both automatic and manual mode. The firmware should be updated to the latest version when the update has successfully completed. The firmware should downgrade to version 1 when firmware reset has successfully completed. | Essential |
| **Security:** Authentication is required to enter the web server. OTA update and firmware reset are performed over HTTPS. | Essential |
| **Networking:** The unPhone should be able to scan and connect to any WiFi networks (hidden networks included), provided that the password entered is correct. The unPhone should also be able to get the its latitude and longitude using Google Geolocation API. | Essential |
| **Informative:** The unPhone should be able to publish data to Adafruit.io, and send notifications through IFTTT. | Essential |
| **Hardware Robustness:** The motor, ultrasonic sensors, and unPhone should be fully functioning | Desirable |
| **Automatic:** The Robocar should be able to move randomly in automatic mode, while detecting possible obstacles in its front and back to prevent collision. | Desirable |

## Iterations
|  | Iteration 1 | Iteration 2 | Iteration 3 |
|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------||
| Features | <ul><li>Basic <code>aREST</code> API controls over WiFi connection</li></ul> | <ul><li>HTML, CSS, and JavaScript files saved in SD card</li><li>Web server loads HTML, CSS, and JS from SD card</li><li>Use jQuery Ajax to send the control command</li></ul> | <ul><li>HTML, CSS, and JavaScript files are saved in SPIFFS (SPI Flash File System)</li><li>Use [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer) to handle all HTTP requests and Ajax calls</li><li>Cache control of static CSS and JS files</li><li>Use HTTP MD5 Digest Authentication for authentication check</li><li>Automatic Robocar mode with front and back collision detection</li><li>Able to recall the Robocar back to the origin point (automatic mode only)</li><li>Able to get the latitude and longitude of the Robocar using Google Geolocation API</li><li>Send IFTTT notification to the phone when Robocar is stuck</li><li>Push the total distance moved by Robocar in manual mode to Adafruit.io</li><li>OTA update over Github.com using HTTPS protocol</li></ul> |
| Advantages | <ul><li>Simple</li><li>Less power consumption</li></ul> | <ul><li>Able to control the Robocar in both PC and mobile devices</li><li>No longer requires local HTML files to control the Robocar</li></ul> | <ul><li>Feature-rich</li><li>Fast loading time of the AsyncWebServer <strong>(Figure 2)</strong></li><li>Able to control the Robocar in both PC and mobile devices</li><li>No longer requires local HTML files to control the Robocar</li><li>Secure HTTP authorization required before performing any operations</li></ul> |
| Disadvantages | <ul><li>No web server, only able to control the Robocar using local HTML files</li><li>No authentication and OTA update functions, less secure</li><li>Lack of functionality</li></ul> | <ul><li>High power consumption</li><li>Long loading time of the files in SD card <strong>(Figure 1)</strong></li><li>No authentication and OTA update functions, less secure</li><li>Lack of functionality</li></ul> | <ul><li>Very high power consumption</li><li>Complex implementation and increased debugging difficulty</li></ul> |

**Figure 1** and **Figure 2** below shows the loading time of SD web server and AsyncWebServer
respectively. Iteration 2 was not suitable for this project because of its slow performance.

<p align="center">
  <img src="./images/SDserver.png">
  <p align="center"><strong>Figure 1.</strong> Loading time of SD web server (Iteration 2)</p>
</p>

<p align="center">
  <img src="./images/AsyncWebServer.png">
  <p align="center"><strong>Figure 2.</strong> Loading time of AsyncWebServer (Iteration 3)</p>
</p>

## Flowcharts of Core Functionalities
### Automatic Mode

<p align="center">
  <img src="./images/automatic.png">
  <p align="center"><strong>Figure 3.</strong> Flowchart of OTA update process</p>
</p>

#### 1. Initialisation
1. Switch from `manual` mode to `auto` mode
2. Robocar is set to move forward initially

#### 2. Collision Detection
1. Get the distance from the wall
   1. **IF** the robot is moving forward, use the **front** ultrasonic sensor
   2. **ELSE** use the **back** ultrasonic sensor
2. Check distance
   1. **IF** `distance > maximum allowed distance with the wall`
      1. Reset the `stuckCounter`
      2. Continue moving
   2. **ELSE IF** `stuckCounter < maximum allowed stuck count`
      1. Update the coordinates (to be used in the `recall()` function)
      2. Turn 90 degrees to the right

#### 3. Notification
1. **IF** `stuckCounter == maximum allowed stuck count`, the Robocar is probably surrounded by 4
   walls and not able to move forward or backward. Send an IFTTT notification to the user.

### Recall

<p align="center">
  <img src="./images/recall_flowchart.png">
  <p align="center"><strong>Figure 4.</strong> Flowchart of recall function</p>
</p>

1. Recall function called
2. Check for horizontal distance from origin
   1. **IF** horizontal distance is **positive**
      1. Rotate Robocar westwards in accordance to the current direction
      2. Move Robocar for the horizontal distance
   2. **ELSE IF** horizontal distance is **negative**
      1. Rotate Robocar eastwards in accordance to the current direction
      2. Move Robocar for the horizontal distance
3. Check for vertical distance from origin
   1. **IF** vertical distance is **positive**
      1. Rotate Robocar southwards in accordance to the current direction
      2. Move Robocar for the vertical distance
   2. **ELSE IF** vertical distance is **negative**
      1. Rotate Robocar northwards in accordance to the current direction
      2. Move Robocar for the vertical distance
4. Terminate Auto Mode

### OTA update
The OTA update function in this project is a modified version of the previous project. This project
uses [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer) instead of the default
`WebServer` to handle the requests. The `PULLUP` button confirmation has been changed to a button
click confirmation on the web page itself.

<p align="center">
  <img src="./images/ota_flowchart.png">
  <p align="center"><strong>Figure 5.</strong> Flowchart of OTA update process</p>
</p>

#### 1. Setting Up
1. Start the WiFi access point
2. Start the web server
3. Connect to the WiFi network
    1. **IF** a WiFi network was connected before (credentials stored on board), connect to it
    2. **ELSE** wait for the user to connect to a WiFi network
4. Handle the web server client requests

#### 2. Web Page Interaction
1. User connects to Access Point
2. User is able to view details regarding the device
3. User is able to click **UPDATE** if there is a *higher version available*
4. User does not see **UPDATE** button if there is no update available

#### 3. Update Confirmation
1. User is required to **press a confirmation button** on `/ota` page to confirm the OTA update
2. User will be able to **cancel the update request** by visiting another page
3. Once the **confirmation button** is pressed and the update process has started, the user will be unable to access
   the web pages until the update is completed or failed

#### 4. OTA update
1. System performs a HTTPS GET request to the GitHub server to check for new version.
2. System downloads bin file directly from GitHub and perform the update. The pseudocode for the
   update process is written below:

# Implementation
## Web Server Authentication
The [ESPAsyncWebServer](https://github.com/me-no-dev/ESPAsyncWebServer) has a built-in HTTP Digest
MD5 Authentication system. For every `request`, the `authenticate(username, password)` method can be
used to check whether the current user session is authenticated using the correct `username` and
`password` or not. It is more secure as it does not use HTTP GET or POST method to submit the
`username` and `password`, hence the login details can not be seen in the request headers. The
default login details are:
- Username: esp32
- Password: admin

## Robocar Movement (Automatic and Manual Mode)
The pseudocode of the method for moving the Robocar is written below:

```c++
void moveRoboCar() {
  if robocar is in automatic mode
    if the startTime of this move == 0
      set the startTime to millis() (current time in millisecond)

    int distance = 0

    if robocar is moving forward
      distance = get the distance using front ultrasonic sensor
    else
      distance = get the distance using back ultrasonic sensor

    if distance > MAXIMUM_ALLOWED_DISTANCE
      stuckCounter = 0

      if robocar is to move forward
        move forward
      else
        move backward

    else if stuckCounter < MAXIMUM_ALLOWED_STUCK_COUNT
      update the coordinates of robocar
      turn the robocar 90 degrees to the right

      if the front distance >= the back distance
        stuckCounter += 1
        // IFTTT notification will be sent if the condition is met in loop()
  else
    // The robot is in manual mode
    if the startTime of this move == 0 and the robocar is to move forward or backward
      set the startTime to millis() (current time in millisecond)

    if the robocar is to stop
      stop the motor

      if the startTime of this move != 0
        timeMoved = calculate the total time moved before stopping
        reset the startTime to 0
        using timeMoved, calculate the total distance moved before stopping
        // The total distance moved will be updated in loop()

    else if the robocar is to move forward
      move forward
    else if the robocar is to move backward
      move backward
    else if the robocar is to turn left
      turn left
    else if the robocar is to turn right
      turn right
}
```

In `moveRoboCar()` method, the `startTime` variable have different usage in **automatic** and
**manual**:
- In **automatic** mode, the `startTime` variable is used for calculating the coordinates in
  `coordinate()`, which is used by the `recall()` method.
- In **manual** mode, the `startTime` variable is used to calculate the total distance moved from
  the previous motor stop to the current motor stop. Since there are no displacements when the
  Robocar is turning left or right, it is only required to record the `timeMoved` when the robot is
  moving forward or backward

## Recall

```c++
void recall() {
  call coordinate() to calculate the coordinates of the current robocar position

  if x-coordinate > 0
    // Robocar needs to move left
    switch (current direction of robocar) {
      case North:
        turn the robocar 90 degrees to the left
        break
      case East:
        turn the robocar 180 degrees to the right
        break
      case South:
        turn the robocar 90 degress to the right
        break
    }

  else if x-coordinate < 0
    // Robocar needs to move right
    switch (current direction of robocar) {
      case North:
        turn the robocar 90 degrees to the right
        break
      case South:
        turn the robocar 180 degrees to the right
        break
      case West:
        turn the robocar 90 degrees to the left
        break
    }

  // Execute return for x axis
  move the robocar forward for "x-coordinate amount" of time

  if y-coordinate > 0
    // Robocar needs to move backward
    switch (current direction of robocar) {
      case North:
        turn the robocar 180 degrees to the right
        break
      case East:
        turn the robocar 90 degrees to the right
        break
      case West:
        turn the robocar 90 degrees to the left
        break
    }

  else if y-coordinate < 0
    // Robocar needs to move forward
    switch (current direction of robocar) {
      case East:
        turn the robocar 90 degrees to the left
        break
      case South:
        turn the robocar 180 degrees to the right
        break
      case West:
        turn the robocar 90 degrees to the right
        break
    }

  // Execute return for y axis
  move the robocar forward for "y-coordinate amount" of time
}

void coordinate() {
  timeMoved = millis() (current time in millisecond) - startTime
  reset startTime back to 0

  // Set the direction of the virtual distance (represented using time)
  if robocar is to move forward
    virtualDistance = timeMoved
  else
    virtualDistance = -timeMoved

  // Calculate the distance moved before the robocar met an obstacle
  switch (current direction of robocar) {
    case North:
      y-coordinate += virtualDistance
      break
    case East:
      x-coordinate += virtualDistance
      break
    case South:
      y-coordinate -= virtualDistance
      break
    case West:
      x-coordinate -= virtualDistance
      break
  }
}
```

The `recall()` method is the hardest function to implementation in this project. It required an
extensive amount of debugging and testing before it could work. For the recall system to work, the
Robocar needs to have a **virtual cardinal direction**, and a **coordinate system**. These systems are
defined as below:
  - The **virtual cardinal direction** consists of four direction `North`, `East`, `South`, and `West`.
    The initial direction of the Robocar is set to `North` when the automatic mode is started. When
    the Robocar turns 90 degrees to the left or right, its direction will change accordingly.
  - The **coordinate system** is used to record the coordinates of the Robocar when it moves
    randomly. When the automatic mode is started, the initial position of the Robocar is set to be
    the origin point `(0, 0)`. There are four cases to consider:
      1. The current direction of the Robocar is `North`: Add the total distance moved to the
         current `y-coordinate` of the Robocar
      2. The current direction of the Robocar is `East`: Add the total distance moved to the current
         `x-coordinate` of the Robocar
      3. The current direction of the Robocar is `South`: Subtract the total distance moved from the
         current `y-coordinate` of the Robocar
      4. The current direction of the Robocar is `West`: Subtract the total distance moved from the
         current `x-coordinate` of the Robocar

In the `recall()` method, the **virtual cardinal direction** and **coordinate system** can now be
used to identify the **direction to turn** and **distance required to move** to reach the *origin
point*. There are also four cases to consider:
  1. **IF** the final `x-coordinate` of the Robocar is positive, it indicates that the Robocar is at
     the *right* side of the *origin* point
  2. **ELSE IF** the final `x-coordinate` of the Robocar is negative, it indicates that the Robocar is
     at the *left* side of the *origin* point
  3. **IF** the final `y-coordinate` of the Robocar is positive, it indicates that the Robocar is
     *above* the *origin* point
  4. **ELSE IF** the final `y-coordinate` of the Robocar is negative, it indicates that the Robocar
     is *below* the *origin* point

## OTA Update
The pseudocode of the modified version of OTA update from previous assessment is written below:

```c++
doOTAUpdate() {
  respCode = HTTPS GET the URL of the version file

  if respCode == 200
    store the latest version number as highestAvailableVersion
  else
    print error messages
    run setup() again

  if currentVersionNumber >= highestAvailableVersion
    return

  respCode = get the firmware bin file over HTTPS
  fileSize = get the file size using http.getSize()

  if respCode == 200 and the fileSize is above 100KB and under 1MB
    if Update.canBegin(fileSize)
      starting flashing the firmware using Update.writeStream()

      if Update.end()
          if Update.isFinished()
            set the currentVersion to highestAvailableVersion
          else
            print error messages
      else
        print error messages
  else
    print error message
}
```

No major changes from previous assessment except that `PULLUP` button confirmation and LED blink
function are removed.

## Google Geolocation API
This feature was originally implemented in **Iteration 2**, but the API was returning **latitude**
and **longitude** as 0, and **accuracy** as 40000 at all times. Hence, this feature was removed from
the program.

In **Iteration 3**, it was found out that the HTTPS certificate used in `WifiLocation` library was
outdated, which is why the Geolocation API was returning *error values* in **Iteration 2**. After
updating the HTTPS certificate to the updated version below, it is now able to get the location of
the Robocar, as shown in **Image 1**.

```
const char* googleCA = "-----BEGIN CERTIFICATE-----\n" \
"MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G\n" \
"A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp\n" \
"Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1\n" \
"MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG\n" \
"A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\n" \
"hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL\n" \
"v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8\n" \
"eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq\n" \
"tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd\n" \
"C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa\n" \
"zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB\n" \
"mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH\n" \
"V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n\n" \
"bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG\n" \
"3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs\n" \
"J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO\n" \
"291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS\n" \
"ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd\n" \
"AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7\n" \
"TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==\n" \
"-----END CERTIFICATE-----\n";
```

<p align="center">
  <img src="./images/gps.png">
  <p align="center"><strong>Image 1.</strong> Home page of the Robocar web server, showing all useful information.</p>
</p>

## Adafruit.io Data Logging
**NOTE:** It is required to have the latest version of
[Adafruit_IO_Arduino](https://github.com/adafruit/Adafruit_IO_Arduino) library installed. The reason
is discussed [here](#prerequisites)

Before pushing data to the Adafruit.io dashboard, it is required to have an **active internet
connection**. AdafruitIO library uses its own method to connect to the WiFi, which is
`AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS)`, where
- `IO_USERNAME` is the username of the user account at Adafruit.io
- `IO_KEY` is the API key of the user acoount at Adafruit.io
- `WIFI_SSID` is the SSID of the WiFi access point to connect at system start up
- `WIFI_PASS` is the password of the WiFi access point to connect at system start up

It is discovered that the `AdafruitIO_WiFi io()` method will not connect to WiFi access points that
do not have internet access. Hence, `uos-other` is set to be the default WiFi network to connect.

After that, the method `save()` and `value()` in the `AdafruitIO_Feed` library can be used to fetch
and push the feed (or data) respectively. In this project, it is used to record the total distance
moved (in cm) by the Robocar in **manual mode**.

## IFTTT Notification
Sending an IFTTT notification to the phone is relatively easier to implement compared to Adafruit.io
data logging function. In this project, an IFTTT notification will only be sent when the Robocar
detects itself as stucked in **automatic mode**. To send an IFTTT notification, it is only required
to perform a `http->GET()` request to
`https://maker.ifttt.com/trigger/TRIGGER_NAME/with/key/API_KEY`, where `TRIGGER_NAME` is the event /
trigger name set by the user, and `API_KEY` is the API key of the user.

## Hardware Setup
The implemented project is the base Robocar, with the unPhone attached on top of  the chasis,
followed by the IO Expander on the top. The base chasis consists of the provided two motor engines
and their respectitive wheels, as well as the battery box in the middle layer. The battery box is
taped using sticky pads, providing stable support for the battery box while remaining detachable in
case the need of battery change.

<p align="center">
  <img src="./images/robot.jpg">
  <p align="center"><strong>Image 2.</strong> Photo of Robocar Implementation</p>
</p>

Similarly, the IO Expander is attached in the same way. On top of the expander lies the bulk of the
parts used in this project. Sitting in the middle, the Servo FeatherWing chip is responsible of
controlling the motors, connecting them to the unPhone. On the other hand, the two ultrasonic
sensors are attached on header pins, each facing forward and backward to provide sufficient coverage
to detect obstacles for our **Automatic Mode** feature. The sensors are attached to the
corresponding pins as shown in **Figure 6** below.

<p align="center">
  <img src="./images/ultrasonic.png">
  <p align="center"><strong>Figure 6.</strong> Chart of connections to Ultrasonic Sensors</p>
</p>

## Challenges
### 1. Calibration
It is required to experiment with different time values at different speed to find the correct value
for turning the robot 90 degrees. After that, the equation that represents the time change with
respect to speed can be obtained through Excel graph, `time = 2020 - 28.8 * speed + 0.128 * speed *
speed`, as shown in **Figure 7**.

<p align="center">
  <img src="./images/turnRightGraph.png">
  <p align="center"><strong>Figure 7.</strong> Manual calibration of the time required (ms) to turn the
  robot 90 degrees</p>
</p>

### 2. Ultrasonic Sensors
In order to put the ultrasonic sensors on the `PROTO AREA` of the expander board and connect their
pins to the respective `GPIO` pins **(Image 4)**, it is required to solder 4 header pins to the pins of the
ultrasonic sensor, and connect them using *male-female* jumper wire **(Image 3)**.

<p align="center">
  <img src="./images/ultrasonic_solder.jpg">
  <p align="center"><strong>Image 3.</strong> 4 headers pins are soldered on the pins of the each ultrasonic sensor</p>
</p>

<p align="center">
  <img src="./images/install_ultrasonic.gif">
  <p align="center"><strong>Image 4.</strong> Installing the ultrasonic sensor into the header kit</p>
</p>

# Debugging
We have implemented a debugging infrastructure that makes use of macros for easier code debugging.
The variables can be changed from `true` to `false` to enable or disable the function respectively.

`setupDBG`: For printing messages related to the initial setup process.

`netDBG`: For printing messages related to `AsyncWebServer` management.

`otaDBG`: For printing messages in the `doOTAUpdate` method.

`dataDBG`: For printing messages related to Adafruit.io data logging.

`moveDBG`: For printing messages related to the `Movement` control of the Robocar.

# Testing
The system was tested manually to ensure that each feature functioned correctly. This included
running the entire process from start to finish, followed by trying to reproduce the errors to
ensure the error will be handled by the system.

## Robocar Movement Test Cases
|                                Test Case                                |                                      Expected Result                                     | Results |
|:-----------------------------------------------------------------------:|:----------------------------------------------------------------------------------------:|:-------:|
|    Clicking the up arrow button or pressing up arrow key on keyboard    |                                   Robocar moves forward                                  |   Pass  |
|  Clicking the down arrow button or pressing down arrow key on keyboard  |                                  Robocar moves backward                                  |   Pass  |
|  Clicking the left arrow button or pressing left arrow key on keyboard  |                                    Robocar turns left                                    |   Pass  |
| Clicking the right arrow button or pressing right arrow key on keyboard |                                    Robocar turns right                                   |   Pass  |
|                 Releasing mouse click or keyboard press                 |                                       Robocar stops                                      |   Pass  |
|                 Change the speed slider and move forward                |                                   Motor speed increased                                  |   Pass  |
|               Change the current mode from manual to auto               | Robocar starts moving randomly, and turns right when a wall is detected in front or back |   Pass  |
|   While the Robocar is moving in auto mode, change the mode to manual   |                                    Robot stops moving                                    |   Pass  |
|    While the Robocar is moving in auto mode, navigate to another page   |                                    Robot stops moving                                    |   Pass  |
|   While Robocar is moving in auto mode, put an obstacle in front of it  |         Robocar turns right when it is close to the obstacle, and continue moving        |   Pass  |
| While the Robocar is moving in the auto mode, press the "Recall" button |   Robocar moves back to the origin point where the auto mode was started **(Image 5)**   |   Pass  |

<p align="center">
  <img src="./images/recall.gif">
  <p align="center"><strong>Image 5.</strong> Recall process in automatic mode</p>
</p>

## OTA Update Test Cases
|                            Test Case                           |                         Expected Output                         | Results |
|:--------------------------------------------------------------:|:---------------------------------------------------------------:|:-------:|
|                  System unable to get version                  |         Monitor prints "Couldn't get version! rtn code:"        |   Pass  |
|                      System is up to date                      |             Monitor prints "Firmware is up to date"             |   Pass  |
|          System is able to download the firmware file          |       Monitor prints "Received bin file of size %d bytes."      |   Pass  |
|           System failed to download the firmware file          | Monitor prints "An error occurred when retrieving the bin file" |   Pass  |
|         System is able to fully write the firmware file        |  Monitor prints "OTA finished. Update completed successfully."  |   Pass  |
| System is unable to fully write the firmware file successfully |         Monitor prints "Written only: %d / %d . Retry?"         |   Pass  |
|            System encounters error during OTA update           |           Monitor prints "Error occurred. Error #: %d"          |   Pass  |
|      Device does not have enough memory to perform update      |  Monitor prints "Not enough memory space to perform the update" |   Pass  |

## AsyncWebServer Test Cases
| Test Case | Expected Output | Results |
|:---------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------------------------------------:|:-------:|
| Web server cannot find link | Web page shows 404 Not Found | Pass |
| Entering the wrong password when connecting to a new network | Access Point resumes function with `/` showing no network connected | Pass |
| Wrong Username / Password on Login | Unable to proceed. Asks for username and password input again. | Pass |
| Visiting any pages without logging in | User is redirected back to `/login` | Pass |
| Entering `/` with internet connection | WiFi status, local IP, soft IP, total distance moved, battery output voltage, GPS location, and firmware version are shown | Pass |
| Entering `/` with updates available | Update button is shown next to the latest version number | Pass |
| Entering `/` while not connected to internet | Update button does not appear and shows "No Connection" | Pass |
| Entering `/control` while connected to internet | `/control` shows Directional Pad, Mode, and Speed options | Pass |
| Entering `/control` while not connected to internet | `/control` shows Directional Pad, Mode, and Speed options | Pass |
| Entering `/wifi` with no network found | `/wifi` prints "No WiFi access points found" | Pass |
| Entering `/ota` with updates available | `/ota` prompts user to press a confirmation button to start update or return to cancel update request | Pass |
| Entering `/ota` while not connected to internet | `/ota` shows"No Internet Connection" | Pass |
| Entering `/ota` while connected to internet and system is at newest version | `/ota` shows "No updates available" | Pass |
| Entering `/reset` while not connected to internet | `/reset` prints "No Internet Connection" | Pass |
| Entering `/reset` in a non factory version | `/reset` prompts user to press pull-up button to start factory reset or return to cancel reset request | Pass |

## Adafruit.io Data Logging and IFTTT Notification Test Cases
|                          Test Case                         |                                 Expected Output                                 | Results |
|:----------------------------------------------------------:|:-------------------------------------------------------------------------------:|:-------:|
|           Robocar did not stuck in automatic mode          |                     No IFTTT notification sent to the phone                     |   Pass  |
|   Connected to internet, Robocar stuck in automatic mode   |                       IFTTT notification sent to the phone                      |   Pass  |
|   Not connected to internet, Robocar moved in manual mode  |                Monitor prints "Received <- 0" and "Sending -> %d"               |   Pass  |
|     Connected to internet, Robocar moved in manual mode    | Monitor prints "Received <- %val1" and "Sending -> %val2", where %val1 != %val2 |   Pass  |
| Connected to internet, Robocar did not move in manual mode |             Monitor prints "Received <- %val" and "Sending -> %val"             |   Pass  |

# Hardware Problems
Below are a list of hardware problems identified during the implementation and testing stage of the
project.

1. **Problem 1**: LED light on the motor driver dims, and a very small beep sound is emitted, motor
   will not move.
   - **Cause:** The power switch of the AA battery case is not sensitive.
   - **Fix:** Press the power switch down, or slightly adjust it to the left or right
   - **Further note:** It is unable to confirm that flashing `BigDemo.ino` will fix this issue.

2. **Problem 2:** LED light does not dim, no beep sound emitted, motor will not move.
   - **Cause:** This problem occurred during the attempt to fix **Problem 1**, after flashing
                BigDemo.ino and the code. It is unable to determine whether it was a hardware or a
                software issue.
   - **Possible Fix:** Flashing `BigDemo.ino` and `MyProjectThing.ino` again.

3. **Problem 3:** Left motor rotates slower than right motor
   - **Possible cause:**
      1. The electricity transmitted to the left motor is lower, the problem is most obvious when
         the motor speed is slow.
      2. The AA batteries are low
   - **Mitigation:** Increase the speed of the left motor by a small "offset" amount.

4. **Problem 4:** The ultrasonic sensor could return negative values
   - **Possible cause:** The ultrasonic sensor is unable to detect anything within its working range
                         (maximum 4 metres)
   - **Fix:** Position the Robocar in a place where objects and obstacles are present in its
              surroundings.

# Possible Usage and Expansion of the Robocar Project
1. The Robocar can be utilised for disaster situations, where human power is severely limted by the
   environment. For example, the **temperature sensor** and **dust sensor** from **air quality
   project** could be integrated into the Robocar as a cheap and efficient way to locate the fire
   source in a case of fire breakout. Firemen will be able to expand their search very quickly,
   while presenting themselves to less risk.

2. The Robocar could also be used for exploration. The Robocar could be deployed to explore the
   areas that are inaccessible for human due to physical size limitation. A camera could be
   installed on the Robocar to stream the live scene over WiFi.

# Conclusions
Functionalities that have been implemented in into the Robocar system:

1. Robocar will move randomly while preventing collision with walls using front and back ultrasonic
   sensors (**Automatic**)
2. Robocar will move back to the starting point where the automatic mode was started (**Automatic**)
3. Remotely control the Robocar using PC or mobile phones on web server (**Flexibility**)
4. Web server that display the status of the device and enable the ability to update or reset the
   firmware remotely (**Flexibility**)
5. Send IFTTT notification when the Robocar is stucked during automatic mode (**Informative**)
6. Push the total distance moved of the Robocar in manual mode to Adafruit.io (**Informative**)
7. Authentication required to access the web server pages (**Security**)
8. Check the latest version and download the bin file directly from GitHub over HTTPS (**Security**)
9. The ability to reset the firmware back to version 1 and upgrade to latest version again for
   testing purposes (**Repeatable**)
10. Able to join both visible and hidden WiFi networks using the web server (**Networking**)
11. Able to get the latitude and longitude of the Robocar using Google Geolocation API (**Networking**)
